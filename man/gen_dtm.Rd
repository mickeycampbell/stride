% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen_dtm.R
\name{gen_dtm}
\alias{gen_dtm}
\title{Generate terrain model from lidar data}
\usage{
gen_dtm(
  las,
  res = 1,
  algorithm = lidR::tin(),
  ncores = 1L,
  out_file = NULL,
  overwrite = F
)
}
\arguments{
\item{las}{An object of class \code{LAS} (i.e., from \code{\link[lidR:readLAS]{lidR::readLAS()}}) or
\code{LAScatalog} (i.e., from \code{\link[lidR:readLAScatalog]{lidR::readLAScatalog()}}). Airborne lidar point
cloud data in its raw format, where Z values represent elevations above mean
sea level or some reference ellipsoid.}

\item{res}{numeric. The size of a grid cell in point cloud coordinate units.}

\item{algorithm}{function. A function that implements an algorithm to compute
a digital terrain model. \code{lidR} implements \code{\link[lidR:dtm_idw]{lidR::knnidw()}}, \code{\link[lidR:dtm_tin]{lidR::tin()}},
and \code{\link[lidR:dtm_kriging]{lidR::kriging()}} (see respective documentation and examples).}

\item{ncores}{numeric. If you supply a \code{LAScatalog} with multiple tiles of
lidar data, you can leverage multiple CPUs to process your data in parallel,
using \code{\link[future:plan]{future::plan()}}.}

\item{out_file}{chara cter. Optionally, you can save the DTM to disk by
supplying a file path with a .tif extension.}

\item{overwrite}{Boolean. If you opt to write the DTM to an output file, this
parameter specifies if you are willing to overwrite an existing file.}
}
\value{
\code{SpatRaster} where each pixel represents elevation in point cloud
coordinate units.
}
\description{
\code{gen_dtm()} generates a digital terrain model (DTM) from lidar point cloud
data. It is mostly a wrapper function around \code{lidR::rasterize_terrain()}.
}
\details{
In the context of the \code{stride} package workflow, you will likely employ the
use of \code{gen_dtm()} twice. The first is to generate a high-resolution (e.g., 1
m) terrain model that will be used for both normalizing lidar point heights
and generating the ground surface roughness model. The second is to generate
a lower-resolution (e.g., 10 m) terrain model that will be used as the basis
of calculating terrain slope for generating least-cost paths and estimating
travel times.

For this function to execute successfully, the input lidar point cloud
(\code{las}) will need to have ground points classified. Most airborne lidar data
that come from authoritative sources (e.g., the USGS) will have ground points
already classified, so you need not worry about performing this
classification yourself. However, should you need to do so, you can use
\code{lidR::classify_ground()}.
}
